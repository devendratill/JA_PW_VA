                                                                      ____CONSTRUCTOR____
1.What is a constructor?
->>
Constructor are used to initialize the object's state. like method . a constructor also contains a collection
of statements(i.e instructions) that are executed at time of object creation.

2. What is constructor Chaining ?
->>
Constructor chaining is a technique of calling another constructor from one constructor . this()
is used to call the same class constructor whereas super() is used to call super class constructor.

3.can we call a subclass constructor from a superclass constructor ?
->>
No there is no way in java to call a subclass constructor from a superclass constructor.

4.what happens if you keep a return type for a constructor ?
->>
ideally , Constructor must not have a return type . By definition , if a method has a return type , its not a Constructor.
(JLS8.8 Declaration) it will be treated as a normal method. but but compiler gives a warning saying that method has a constructor name.
Example: 
class Demo{
      int Demo()
            {
               return 0;//Warning for the return type 
	    }	
	  }

5.What is No-arg constructor?
->>
Constructor without arguments is called a no-arg constructor.
default constructor in java is always a no-arg constructor.
class Demo
{
public Demo()
	{
          //no -arg constructor 
	}
}

6.How is a No-argument constructor different from the default constructor ?
->>
if class contains no constructor declaration ,then a default constructor with no formal parameters and no throws clause
is implicity declared.if the class being declared is the primordial class object, then the default constructor has an empty body.
otherwise ,the default constructor simply invokes the superclass constructor with no arguments.

7.When do we need Constructor Overloading ?
->>
sometimes there is a need to initialize an object in different ways.
This can be done using constructor overloading. different constructors can do different work by implementing 
different lines of code and are called based on the type and no of parameters passed. According to the situation, a 
constructor is called with a specific number of parameters among overloaded constructors.

8.What is Default Constructor 
->>
Default constructor 
1.For every java class constructor concept is applicable.
2.if we don't write any constructor, then the compiler will generate any default constructor.
3.if we write at least one  constructor then the compiler won't generate any default constructor , so 
we say every java class will have a compiler generated default constructor or programmer written constructor
but not both simultaneously.

Prototype of default constructor:
1.There is always no argument constructor .
2.the Access modifier  of the default constructor is the same as the class modifier .{applicable for public and default}
3.Default constructor contains one line , super() it is a call to super  class constructor .

ex-1
class Test {

}

public class Test {

}

class Test{

}

class Test{
void Test(){

}
}  
 ex-2
class Test {
Test(){
super ();
      }
}

public class Test{

public Test(){
super();
             }
}

class Test{
Test(){
super();
 }
void Test(){

   }
}

									_____ENCAPSULATION_____

1.What is Encapsulation in java ? Why is it called data hiding?
->>
The process of binding data and corresponding methods (behaiviour) together into a sing unit is called Encapsulation in java.
in other word Encapsulation is programming technique that binds the class members (variables and method) together and prevents them from 
being accessed by other classes, thereby we can keep variables and methods safe from outside interference and misuse.if a field is declared 
private in the class then it can not be accessed by anyone outside interference and misuse. if a field is declared private in the class then 
it cannot be accessed by anyone outside the class and hides the fields within the class. Therefore, Encapsulation is also called data hiding.

2.What are the important feature of Encapsulation?	
->>
Encapsulation is a key concept in object - oriented programming (OOP) that envolves combining data and method within a single unit
known as a class . here are some important feature of Encapsulation:

Data Hiding: it is a way of restricting the access of our data members by hiding the implementation details.
Encapsulation also provides a way for data hiding. The user will have no idea about the inner implementation of the class. 
It will not be visible to the user how the class is storing values in the variables. The user will only know that we are 
passing the values to a setter method and variables are getting initialized with that value.

Increased Flexibility: We can make the variables of the class read-only or write-only depending on our requirements. 
If we wish to make the variables read-only then we have to omit the setter methods like setName(), setAge(), etc. 
from the above program or if we wish to make the variables write-only then we have to omit the get methods like getName(), getAge(), etc. from the above program

Reusability: Encapsulation also improves the re-usability and is easy to change with new requirements.

Testing code is easy: Encapsulated code is easy to test for unit testing.

Freedom to programmer in implementing the details of the system: This is one of the major advantage of encapsulation that
it gives the programmer freedom in implementing the details of a system. The only constraint on the programmer is to maintain 
the abstract interface that outsiders see.

3.What are setter and getter method in java explain with example?
->>
Getter and setter methods, also known as accessor and mutator methods,are used in java to access and modify the private data members of a class respectively.
they prived the layer of abstraction that allow us to control the access to the data and enforce constraint on the data as needed.Here's an example to illustrate
how getter and setter method works:
 
class redy {
    private int age;
    private String name;
  
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    void show(){
        System.out.println(age+" "+name);
        
    }
}

public class practice {

    public static void main(String[] args) {
        redy obj1 = new redy();
        redy obj2 = new redy();

        obj1.setAge(19);
        obj1.setName("deven");
        obj1.show();

        obj2.setAge(25);
        obj2.setName("seven");
        obj2.show();

        int stu1Age=obj1.getAge();
        System.out.println(stu1Age);
    }
}

4.What is the use of this keyword explain with an example?
->>
In Java, ‘this’ is a reference variable that refers to the current object, or can be said “this” 
in Java is a keyword that refers to the current object instance.
It can be used to call current class methods and fields, to pass an instance of the current class as a parameter,
and to differentiate between the local and instance variables. 
Using “this” reference can improve code readability and reduce naming conflicts.

Java this reference: 
In Java, this is a reference variable that refers to the current object on which the method or constructor is being invoked. 
It can be used to access instance variables and methods of the current object.

1.Using the ‘this’ keyword to refer to current class instance variables.
2.Using this() to invoke the current class constructor
3.Using ‘this’ keyword to return the current class instance 
4.Using ‘this’ keyword as the method parameter
5.Using ‘this’ keyword to invoke the current class method 
6.Using ‘this’ keyword as an argument in the constructor call

class redy {
    private int age;
    private String name;
  
    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    void show(){
        System.out.println(age+" "+name);
        
    }

5.What is the advantage of Encapsulation?
 ->>
Advantages of Encapsulation:  

1.The encapsulated code is more flexible and easy to change with new requirements.
2.It prevent the other classes from accessing the private fields.
3.Encapsulation allows modifying implemented code without breaking other code who have implemented the code.
4.It keeps the data and code safe from external inheritance.thus, Encapsulation helps to achieve security.
5.it improves the maintainability of the application.

6. How to achieve Encapsulation in java ? Give an example.
->>
Encapsulation is achieved in java by declaring the instance variables of a class as private,
and providing public getter and setter method to access and modify the value of these variables .
this allows us to control access to the data and ensure that it can only be modified through the 
method of the class, rather than directly accessing the instance variable from out side the class.
Here's an example to illustrate how encapsulation can be achieved in java:
ex-
class bankAc {
    private String Acno;
    private double Bal;

    public bankAc(String Acno, double Bal) {
        this.Acno = Acno;
        this.Bal = Bal;
    }

    public String getAcno() {
        return Acno;
    }

    public void setAcno(String Acno) {
        this.Acno = Acno;
    }

    public double getBal() {
        return Bal;
    }

    public void deposit(double amount) {
        Bal += amount;
    }

    public void withdraw(double amount) {
        if (amount <= Bal) {
            Bal -= amount;
        } else {
            System.out.println("insufficient funds");
        }
    }
}

public class bank {

    public static void main(String[] args) {
        bankAc obj = new bankAc("A/C11222316004", 50000);
        System.out.println("Bank account number- " + obj.getAcno());
        System.out.println("Available balance- " + obj.getBal());
        System.out.println();
        obj.deposit(500);
        System.out.println("balance after deposite= " + obj.getBal());
        System.out.println();
        obj.withdraw(2500);
        System.out.println("balance after withdraw= " + obj.getBal());
    }
}

									_______STATIC KEYWORD_______

1.Why do we need Static keyword in java programming ?
->>
*The static keyword in java is used to indicate that a member belongs to a class rather than an instance of class.
This means that the member can be accessed without having to create an instance of the class.
*Here are some common uses of static in java:
*To create class-level variables that are shared by all instances of class.
*To create class-level methods that can be called without creating an instance of a class.
*To create block of code that is executed when the block is loaded.
*In general, static is used to create class level members that are independent of any specific instance of class and can be accessed  without 
creating an instance of the class.
*In java, static is a keyword that is used for memory management mainly. static means single copy storage for variables or methods.
*The members that are marked with the static keyword inside a class are called static members.

2.what is class loading and how does the java program actually executes?
->>
Class loading 
in java , classloading is the proccess of loading class files into the JVM(java virtual machine) at runtime.it is responsible for overloading classes
from various sources, such as the file system,network,and databases,and making them available to the JVM for execution . the class loading process in 
java is divided into three phases:Loding , Linking, and Initialization.

Loading:In the loading phase, the classloader locates the class file using the fully quilified class name , 
read the class file and convert it into a class object. the class object contains the metadata of the class, 
such as the fields, methods and constructors.

linking:in the linking phase, the JVM performs several operations on the class object, such as
verifying the class files integrity,resolving symbolic references, and allocating memory for the class variables.

initiaization:In the initialization phase, the JVM intializes the class variables with their default values, 
and runs the class's static intialization block(if any)

3.Can we mark a local variable as static?
->>No, we cannot mark a local variable with a static keyword.

4.Why is a static method also called a class method?
->>A static method is also called a class method because it ties to a classs rather than an individual
instance of a class. therefore , we need not to create an object of the class to call and execute a static method.

5.Why is the static block executed before the main method in java?
->>
When the dot class file is loded into memory, a static block is executed. After executing the static block
JVM calls the main method to start execution.therefore the static block is executed before the main method.
 
6.What is the use of static keyword explain with an example
->>
The static keyword in java is use to indicate that the member belong to a class rather than an instance of a class.
this mean that member can be accessed without having to create an instance of the class.
here is an exemple that demonstrates the use of static keyword in java:

public class Counter
{
private static int count=0;

public Counter(){
	count++;
		}
public static int getCount(){
	return count; 
	}
}

In this example count variable is declared as static, which means it is a class level variable that is shared by all instance 
of the Counter class. the getcount method is also declared as static, which means it can be called without creating an instance of Counter class.

7.The difference between static variable and instance variable is as follows
->>
*A static variable is also called a class variable whereas an instance variable is also called as static variable.
*Class variables can be accessed inside a static block,instance block,static method,instance method,and method of the inner class
whereas, whereas instance variable can be accessed only inside the instance members, and method of the inner class.
*class variable is always resolved during compile time whereas , instance variable is resolved during runtime.
*Static variable cannot be serialized in java whereas instance variable can be serialized. 

8.Difference between static and non static members of a class
->>
Static:
*This variable is also called "class variables".
*These variables will get memory in the method area.
*If the value does not change from object to object then we need to use static variable.
*Inside a static area we can access static variables only.
*Static variable are created using static keywords.

non-static:
*These variable are called "instanse variables"
*These variable will get memory in the heap area.
*If the value changes from object to object then we need to use "non-static" variables.

									

									________PRACTICAL PROGRAM________

1.Create a class that keeps track of the number of instances created.implement a static variable and method to accomplish this.
->>
public class prac1 {

    private static int inCount = 0;

    public prac1() {
        inCount++;
    }

    public static int getCount() {
        return inCount;
    }

    public static void main(String[] args) {

        prac1 a1 = new prac1();
        prac1 a2 = new prac1();
        prac1 a3 = new prac1();
        prac1 a4 = new prac1();
        prac1 a5 = new prac1();
        System.out.println("Number of instance "+prac1.getCount());

    }
}

2.Write a program and create a constructor with parameters and initialise the variable using a constructor.
->>
class student {
    private int num;
    private String brand;

    public student() {
        System.out.println("Zero parameterize constructor");
         num = 10001;
       brand = "G-wagon";
    }

    student(int num, String brand) {

        System.out.println("parameteraise");
        this.num = num;
        this.brand = brand;
    }

    void disp() {
        System.out.println("number  "+num);
        System.out.println("brand  "+brand);
    }

}

public class prac1 {

    public static void main(String[] args) {
        student obj1 = new student();
        obj1.disp();

        student obj2 = new student(25, "Elvish");
        obj2.disp();
    }
}

3.Use a private keyword for a variable and use setter and getter method to initialise and print the values.
->>
class bigboss{
private int age=25 ;
private String name="Elvish",brand="Raosaab";

public int getAge() {
    return age;
}

public void setAge(int age) {
    this.age = age;
}

public String getName() {
    return name;
}

public void setName(String name) {
    this.name = name;
}

void disp(){
    System.out.println(name);
    System.out.println(age);
}

public String getBrand() {
    return brand;
}

public void setBrand(String brand) {
    this.brand = brand;
}
    
}



public class prac1 {

    public static void main(String[] args) {
         bigboss b1=new bigboss();
         bigboss ag=new bigboss();
         bigboss nm=new bigboss();

         System.out.println(b1.getBrand());
         System.out.println(ag.getAge());
         System.out.println(nm.getName());

    }
}

4.Write a program to call a method without creating an object of a class.
->>
class Bus{
static int a;
static int b;
static void Multiplie(){
    a=15;
    b=30;
    System.out.println("Multiplie= "+ a*b);
}
 }
public class prac1 {   
    public static void main(String[] args) {
        Bus.Multiplie();
    }
}

5.Write a program which has a static block and constructor overloading,initilise variables using constructors and print it.
->>
public class staticbox {

    public int num;
    public String brand;

    public staticbox() {
        System.out.println("NO arg constructor");
    }

    public staticbox(int num) {
        super();
        this.num = num;
    }

    public staticbox(String brand) {
        super();
        this.brand = brand;
    }

    public staticbox(int num,String brand){
        super();
        this.num=num;
        this.brand=brand;
    }

    public String toString(){
       return "staticbox [num=" + num + ", brand=" + brand + "]";
    }

    static{
        System.out.println("Static Block");
    }

    public static void main(String[] args) {
        staticbox block=new staticbox(20);
        System.out.println(block.num);
        staticbox block2=new staticbox("G-wagon");
        System.out.println(block2.brand);
        staticbox block3=new staticbox(1001,"porshe");
        System.out.println(block3.toString());
    }
}
